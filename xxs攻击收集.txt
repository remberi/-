2017.8.3


      需求功能点上线，运维升级扫描服务时发现一个高危漏洞：

            具体攻击方式如下:http://XXXX/indexWidgetLogin.jsp?widgetUrl=%22%7C%5Bwindow%5B%27location%27%5D%3D%27%5Cx6a%5Cx61%5Cx76%5Cx61%5Cx73%5Cx63%5Cx72%5Cx69%5Cx70%5Cx74%5Cx3a%5Cx61%5Cx6c%5Cx65%5Cx72%5Cx74%5Cx2833%5Cx29%27%5D%2B%22

url decode

decodeURIComponent("%22%7C%5Bwindow%5B%27location%27%5D%3D%27%5Cx6a%5Cx61%5Cx76%5Cx61%5Cx73%5Cx63%5Cx72%5Cx69%5Cx70%5Cx74%5Cx3a%5Cx61%5Cx6c%5Cx65%5Cx72%5Cx74%5Cx2833%5Cx29%27%5D%2B%22")

"|[window['location']='\x6a\x61\x76\x61\x73\x63\x72\x69\x70\x74\x3a\x61\x6c\x65\x72\x74\x2833\x29']+"

将url解码出来的\替换成0，因为16进制转ascii码开头第一个位置默认为0

0x6a0x610x760x610x730x630x720x690x700x740x3a0x610x6c0x650x720x740x28330x29

将上面的16进制转ascii码

["javascript:alert(33)"]


            攻击者这次没有在参数中显式的带入JavaScript、alert、iframe这种关键字，但是是目标页面确实被执行可疑的操作代码，经过排查分析得出,攻击者将代码转换成16进制ascii码，再经过url encode，普通的wf防护只能监测显式传递的代码，并不能将url decode出来再进行判断。


           解决方案：
                     后端：实现xss过滤器，过滤请求中的非法字符，具体见：http://www.cnblogs.com/Warmsunshine/p/5786562.html

                     前端：暂无可执行方案，在动态网页中，页面所接收的参数都具有不确定性，很难去做区分建议交给后端处理

                   
                     